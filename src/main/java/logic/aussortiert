MANUELLE PFADEINGABE ZUM LADEN:
//		JTextField pathField = new JTextField("Kompletten Dateipfad eingeben", 16);
//		ActionListener loadListener = new ActionListener() {	// invoked when enter is pressed
//            
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                returnArray = new int[1];
//                String path = pathField.getText();
//                if(Window.load(path)){
//                	dialog.dispose();
//                } else{
//                	JOptionPane.showMessageDialog(null, "Datei wurde nicht gefunden.");
//                }
//            }
//        };
//        pathField.addActionListener(loadListener);
		
//		JButton loadButton= new JButton("Laden");
//		loadButton.setToolTipText("Lädt die Datei an dem momentan eingegeben Dateipfad im Nachbarfeld. "
//				+ "Das .txt am Ende des Dateinamens ist optional.");
//		loadButton.addActionListener(loadListener);

//		loadRow.add(pathField);
//		loadRow.add(loadButton);






package utilities;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;

import javax.swing.JPanel;

/**
 * A Printer enabling printing of a JPanel.
 */
public class PanelPrinter implements Printable {

	private JPanel panelToPrint;
	
	public PanelPrinter(JPanel panelToPrint){
		this.panelToPrint = panelToPrint;
	}
	
	@Override
	public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
	    if (page > 0) {
	         return NO_SUCH_PAGE;
	    }
	    
	    Graphics2D g2d = (Graphics2D)g;
	    g2d.translate(pf.getImageableX(), pf.getImageableY());

	    // Now we perform our rendering
	    panelToPrint.printAll(g);

	    // tell the caller that this page is part
	    // of the printed document
	    return PAGE_EXISTS;
	}

}


package generator;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import gui.Window;

public class Main {
	private static int[] returnArray;
	private static JDialog dialog = new JDialog();

	public static void main(String[] args) {
		prompt();
		if (returnArray.length == 1) {
			return; // prompt returned fatal error value
		}
		run(returnArray[0], returnArray[1]);
	}

	public static void run(int length, int difficulty) {

		System.out.println("generate new Sudoku");
		Sudoku sudoku = new Sudoku(length, difficulty);

		sudoku.fill();
		// sudoku.printToTextFile(path, fileName, solutionFileName);
		Window window = new Window(sudoku);
		window.setVisible(true);
	}

	/**
	 * Asks the user via JOptionPane for the length and difficulty input or if
	 * he wants to load a Sudoku.
	 */
	private static void prompt() {
		returnArray = new int[2]; // the return values later on

		JPanel mainPanel = new JPanel(); // the mainPanel
		mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
		final JTextField lengthInput = new JTextField(26);
		final JTextField difficultyInput = new JTextField(19);

		// the listener invoked when a source tries to start a new sudoku game
		ActionListener startListener = new ActionListener() { 
			@Override
			public void actionPerformed(ActionEvent e) {
				// length input checking stuff
				if (lengthInput.getText().equals("")) {
					// if the field is empty, use the standard value
					returnArray[0] = 9;
				} else {
					try {
						returnArray[0] = Integer.parseInt(lengthInput.getText());
					} catch (NumberFormatException ex) {
						JOptionPane.showMessageDialog(null,
								"Unerlaubte Länge eingegeben. Länge ist keine Zahl: " + lengthInput.getText());
						returnArray[0] = -1;
					}
					if (Math.sqrt(returnArray[0]) % 1 != 0 && returnArray[0] != -1 || returnArray[0] > 16) {
						JOptionPane.showMessageDialog(null, "Unerlaubte Länge eingegeben. Sie ist keine "
								+ "Quadratzahl und/oder zu groß: " + returnArray[0]);
						returnArray[0] = -1;
					}
					if (returnArray[0] == 1) {
						JOptionPane.showMessageDialog(null, "Bitte keine 1 als Länge eingeben.");
						returnArray[0] = -1;
					}
				}

				// difficulty input checking stuff
				if (difficultyInput.getText().equals("")) {
					// if the field is empty, use the standard value
					returnArray[1] = 5;
				} else {
					try {
						returnArray[1] = Integer.parseInt(difficultyInput.getText());
					} catch (NumberFormatException ex) {
						JOptionPane.showMessageDialog(null,
								"Unerlaubte Schwierigkeit eingegeben. Schwierigkeit ist keine Zahl: "
										+ difficultyInput.getText());
						returnArray[1] = -1; // input error
					}
					if ((returnArray[1] > 10 || returnArray[1] < 1) && returnArray[1] != -1) {
						JOptionPane.showMessageDialog(null,
								"Unerlaubte Schwierigkeit eingegeben. Schwierigkeit ist nicht "
										+ "innerhalb der erlaubten Spanne: " + returnArray[1] + ".");
						returnArray[1] = -1; // input error
					}
				}
				if (returnArray[0] != -1 && returnArray[1] != -1)
					dialog.dispose();
			} // the prompt window is only closed if there has been no input
				// error
		};

		// generate the noteRows
		JLabel noteRow1 = new JLabel("Bitte geben Sie eine Quadratzahl als Länge ein, welche nicht größer "
				+ "als 16 ist und einen Schwierigkeitsgrad von 1 bis 10."); 
		JLabel noteRow2 = new JLabel(" "); // second row to have a separating
											// empty line

		// generate the lengthRow
		JPanel lengthRow = new JPanel();
		lengthRow.add(new JLabel("Länge: "));

		lengthInput.setText("9");
		lengthInput.addActionListener(startListener);
		lengthRow.add(lengthInput);

		// generate the difficultyRow
		JPanel difficultyRow = new JPanel();
		difficultyRow.add(new JLabel("Schwierigkeitsgrad: "));

		difficultyInput.setText("5");
		difficultyInput.addActionListener(startListener);
		difficultyRow.add(difficultyInput);

		// generate loadRow
		JPanel loadRow = new JPanel();

		JButton loadButton = new JButton("Lade");
		loadButton.setToolTipText("Lädt einen vorher gespeicherten Sudoku Spielstand");
		loadButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				int returnVal = chooser.showDialog(mainPanel, "Wähle Speicherdatei");

				String path;

				if (returnVal == JFileChooser.APPROVE_OPTION) {
					path = chooser.getSelectedFile().getAbsolutePath();
					returnArray = new int[1];

					if (Window.load(path)) {
						dialog.dispose();
					}

				}
			}
		});

		loadRow.add(loadButton);

		// generate confirmRow
		JPanel confirmRow = new JPanel();
		JButton startButton = new JButton("Start");
		startButton.setToolTipText(
				"Startet ein neues Sudoku Spiel mit den " + "momentan eingegebenen Parametern Länge und Schwierigkeit");
		startButton.addActionListener(startListener);
		confirmRow.add(startButton);

		JButton cancelButton = new JButton("Abbrechen");
		cancelButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				dialog.dispose();
				returnArray = new int[1];
			}
		});
		confirmRow.add(cancelButton);

		mainPanel.add(noteRow1);
		mainPanel.add(noteRow2);
		mainPanel.add(lengthRow);
		mainPanel.add(difficultyRow);
		mainPanel.add(loadRow);
		mainPanel.add(confirmRow);

		dialog.add(mainPanel);
		dialog.setBounds(0, 0, 800, 250);
		dialog.setLocationRelativeTo(null); // center the frame
		dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
		dialog.setVisible(true);
	}
}

// alte Knöpfe im bottomPanel
		// restart button
		JButton restartButton = new JButton("Neues Sudoku");
		restartButton.setToolTipText("Ersetzt das momentane Sudoku durch ein neues");
		restartButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int answer = JOptionPane.showConfirmDialog(null,
						"Bist du sicher, dass du mit einem neuen Sudoku starten möchtest? "
								+ "Das momentane Sudoku wird nicht gespeichert.",
						"Neues Sudoku bestätigen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
				if (answer == JOptionPane.OK_OPTION) {
					mainFrame.dispose();
					Main.main(null);
					// Main.run(length, sudoku.getDifficulty());
				}
			}
		});
		bottomPanel.add(restartButton);

		// save button
		JButton saveButton = new JButton("Speichern");
		saveButton.setToolTipText("Speichere das Sudoku in einer Textdatei");
		saveButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				int returnVal = chooser.showDialog(mainFrame, "Speichern");

				if (returnVal == JFileChooser.APPROVE_OPTION) {
					String path = chooser.getSelectedFile().getAbsolutePath();
					save(path);
				}
			}
		});
		bottomPanel.add(saveButton);

		// load button
		JButton loadButton = new JButton("Laden");
		loadButton.setToolTipText("Lade ein gespeichertes Sudoku");
		loadButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				int returnVal = chooser.showDialog(mainFrame, "Laden");

				String path;

				if (returnVal == JFileChooser.APPROVE_OPTION) {
					path = chooser.getSelectedFile().getAbsolutePath();
					if (Window.load(path)) {
						mainFrame.dispose();
					}

				}
			}
		});
		bottomPanel.add(loadButton);

		// print button
		JButton printButton = new JButton("Drucken");
		printButton.setToolTipText("Drucke das aktuelle Sudoku auf eine DIN A4 Seit skaliert aus");
		printButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				print();
			}
		});
		bottomPanel.add(printButton);